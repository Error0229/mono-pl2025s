# 3. Semaphores 與範例
Semaphore 提供 `P` (嘗試進入) 與 `V` (釋放) 兩操作。若 semaphore 值為 0，執行 `P` 的進程會被阻塞，直到其他進程 `V`。以下以伺服器處理輸入與輸出緩衝區的例子展示：

```pseudo
var in_mutex, out_mutex := semaphore(1)
var num_cards := semaphore(0)
var free_cards := semaphore(N)

process reader:
  loop
    read card
    P(free_cards); P(in_mutex)
    deposit card
    V(in_mutex); V(num_cards)
```

此例中的 `reader`、`executer`、`printer` 三個進程共用多個 semaphore，確保互斥與條件同步同時滿足。這類範式廣泛應用於作業系統核心或多線程程式庫。

Section 3 of the paper provides pseudocode for a semaphore-based buffer with reader, executor, and printer processes. Semaphores combine mutual exclusion and condition synchronization. The `P` operation decrements the counter, blocking if negative; `V` increments and wakes a waiting process. Implementing such patterns in any language requires careful pairing of `P` and `V` to avoid deadlocks.

