# 3. 選擇(select) 與多路複用
`select` 陳述式允許 goroutine 同時監聽多個通道，根據就緒情況選擇執行。這對於處理多個事件來源或實作超時控制非常重要。例如火箭倒數程式使用 `time.Tick` 與 `abort` 兩通道，在 `select` 中依情況決定是否發射或取消。

```go
select {
case <-tick:
    fmt.Println(count)
case <-abort:
    fmt.Println("Launch aborted!")
    return
}
```

若多個 case 同時就緒，`select` 會隨機選擇其中之一，以避免某些通道長期被忽略。若欲實作「非阻塞」通訊，可搭配 `default` 分支。

`select` lets a goroutine wait on multiple channel operations. The book shows examples such as timers and abort channels. If several cases are ready, one is chosen at random to avoid starvation. A `default` case can be used to implement non-blocking operations or timeouts.

