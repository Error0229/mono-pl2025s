# 5. Mutex 與共享變數
若必須在多個 goroutine 間共享資料，可使用 `sync.Mutex`：

```go
var mu sync.Mutex
var balance int

func Deposit(amount int) {
    mu.Lock()
    balance += amount
    mu.Unlock()
}

func Balance() int {
    mu.Lock()
    b := balance
    mu.Unlock()
    return b
}
```

這類做法保護了共享變數 `balance`，但要注意：
1. 鎖定範圍應盡量小，避免阻塞過久。
2. 需確保任何錯誤路徑也會釋放鎖，通常用 `defer` 完成。

The book describes `sync.Mutex` in Chapter 9 as the main tool for protecting shared variables. Lock the mutex before reading or writing the shared state and unlock afterward. Proper use prevents race conditions but requires careful structuring to avoid deadlocks.

